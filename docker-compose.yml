services:
  db:
    image: postgres:16-alpine
    volumes:
      - postgres_db:/var/lib/postgres/data
    env_file:
      - .env
    restart: unless-stopped

  web:
    build: .
    command: >
      sh -c "python manage.py wait_for_db &&
            python manage.py migrate &&
            python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./:/app
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - db

  redis:
    image: redis:alpine

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    command: "celery -A rick_and_morty_api worker -l info"
    depends_on:
      - web
      - db
      - redis
    restart: on-failure
    env_file:
      - .env

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile

    command: >
      sh -c "python manage.py wait_for_db &&
          celery -A rick_and_morty_api beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    depends_on:
      - web
      - db
      - redis
    restart: on-failure
    env_file:
      - .env

  flower:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5555:5555"
    command: "celery -A rick_and_morty_api flower --address=0.0.0.0"
    depends_on:
      - celery
    env_file:
      - .env

volumes:
  postgres_db: